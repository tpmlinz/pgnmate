<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>com.pgnmate.pgn</groupId>
	<artifactId>pgnparser</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>pgnparser</name>
	<url>http://maven.apache.org</url>

	<properties>
		
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		
		<java.version>1.8</java.version>
		
		
		
		<antlr4.visitor>false</antlr4.visitor>
		<antlr4.listener>true</antlr4.listener>
		<antlr4.version>4.7</antlr4.version>
		<antlr4.plugin.version>4.7</antlr4.plugin.version>
		
        <xtend.version>2.13.0</xtend.version>
	</properties>

	<build>
		<plugins>
		
		<!-- XTend  -->		
		<plugin>
				<groupId>org.eclipse.xtend</groupId>
				<artifactId>xtend-maven-plugin</artifactId>
				<version>${xtend.version}</version>
				<!-- 
				<executions>
					<execution>
						<goals>
							<goal>compile</goal>
							<goal>testCompile</goal>
							<goal>xtend-install-debug-info</goal>
							<goal>xtend-test-install-debug-info</goal>
						</goals>
					</execution>
				</executions>
				-->
				<!-- 
				<configuration>
					<outputDirectory>${project.build.directory}/xtend-gen/main</outputDirectory>
					<testOutputDirectory>${project.build.directory}/xtend-gen/test</testOutputDirectory>
				</configuration>
				-->
			</plugin>
		
		
			<!-- Antlr -->
			
			<!--
			When the mvn command is executed all grammar files under src/main/antlr4, except any import grammars under src/main/antlr4/imports 
			will be analyzed and converted to Java source code in the output directory target/generated-sources/antlr4.
			Your input files under antlr4 should be stored in sub directories that reflect the package structure of your java parsers. 
			If your grammar file parser.g4 contains: 
			
				@header {
					package org.jimi.themuss;
				}
				
			Then the .g4 file should be stored in: src/main/antlr4/org/jimi/themuss/parser.g4. This way the generated .java files will 
			correctly reflect the package structure in which they will finally rest as classes.
			 -->
			<plugin>
				<groupId>org.antlr</groupId>
				<artifactId>antlr4-maven-plugin</artifactId>
				<version>${antlr4.plugin.version}</version>
				 
				<configuration>
				<visitor>false</visitor>
				<listener>true</listener>
				
				<!-- 
                <arguments>
                    <argument>-package</argument>                    
                    <argument>com.pgnmate.pgn</argument>                                  
                </arguments>
                	<sourceDirectory>${basedir}/src/main/antlr4</sourceDirectory>                	 
                	<outputDirectory>${project.build.directory}/generated-sources/antlr4/com/pgnmate/pgn</outputDirectory>
                	<visitor>false</visitor>
                	<listener>true</listener>
                -->
                
                
            	</configuration>
            	
				<executions>				
          			<execution>          			
          				<!--  <phase>generate-sources</phase> -->
            			<id>antlr</id>
            				<goals>            				
              					<goal>antlr4</goal>
            				</goals>            				
          			</execution>
				</executions>								
			</plugin>
			
			
			<!--  Build Helper -->			
			<plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>1.7</version>
                <executions>
                    <execution>
                        <id>add-source</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${basedir}/src/main/xtend-gen</source>
                            </sources>
                        </configuration>
                    </execution>
                    <execution>
                    <id>add-test-source</id>
                    <phase>generate-test-sources</phase>
                    <goals>
                    	<goal>add-test-source</goal>
                    </goals>
                    <configuration>
                    	<sources>
                    		<source>${basedir}/src/test/xtend-gen</source>                    	
                    	</sources>
                    </configuration>
                    </execution>
                </executions>
			</plugin>			
			
			
			
			

			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.7.0</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>
				
			

			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.19.1</version>
				
				<dependencies>
					<dependency>
						<groupId>org.junit.platform</groupId>
						<artifactId>junit-platform-surefire-provider</artifactId>
						<version>1.0.1</version>
					</dependency>
					<dependency>
						<groupId>org.junit.jupiter</groupId>
						<artifactId>junit-jupiter-engine</artifactId>
						<version>5.0.1</version>
					</dependency>
				</dependencies>
				
				
				<configuration>
					<includes>
						<!-- By default, the Surefire Plugin will automatically include all test 
						classes with the following wildcard patterns but we have included them explicitly 
						here -->
						<include>**/Test*.java</include>
						<include>**/*Test.java</include>
						<include>**/*Tests.java</include>
						<include>**/*TestCase.java</include>
					</includes>
				
					<excludes>
						<!-- Abstract classes shouldn't be annotated with test but here we explicitly 
						exclude them anyway -->
						<exclude>**/Abstract*</exclude>
					</excludes>
					
					<properties>
						<!-- <includeTags>fast</includeTags> -->
						<excludeTags>slow</excludeTags>
						<!-- <configurationParameters> junit.jupiter.conditions.deactivate = * 
						</configurationParameters> -->
					</properties>
				</configuration>
							
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.0.0-M1</version>
				<configuration>
					<show>private</show>
					<nohelp>true</nohelp>
				</configuration>
			</plugin>

		</plugins>
	</build>
	
	

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.0.0-M1</version>
			</plugin>
		</plugins>
	</reporting>
	
	
	


	<!-- JUnit -->
	<dependencies>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<version>5.0.1</version>
<!-- 			<scope>test</scope> -->
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.0.1</version>
<!-- 			<scope>test</scope> -->
		</dependency>
		<dependency>
			<groupId>org.junit.vintage</groupId>
			<artifactId>junit-vintage-engine</artifactId>
			<version>4.12.1</version>
<!-- 			<scope>test</scope> -->
		</dependency>
		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-launcher</artifactId>
			<version>1.0.1</version>
<!-- 			<scope>test</scope> -->
		</dependency>
		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-runner</artifactId>
			<version>1.0.1</version>
<!-- 			<scope>test</scope> -->
		</dependency>
	
			
		
		<!-- To avoid compiler warnings about @API annotations in JUnit code -->
		<dependency>
			<groupId>org.apiguardian</groupId>
			<artifactId>apiguardian-api</artifactId>
			<version>1.0.0</version>
<!-- 			<scope>test</scope> -->
		</dependency>
		
		
		
		<!-- https://mvnrepository.com/artifact/org.antlr/antlr4-maven-plugin -->
		<dependency>
        	<groupId>org.antlr</groupId>
        	<artifactId>antlr4-runtime</artifactId>
        	<version>${antlr4.version}</version>
    	</dependency>
 
		<dependency>
        	<groupId>org.antlr</groupId>
        	<artifactId>antlr4-maven-plugin</artifactId>
        	<version>${antlr4.plugin.version}</version>
    	</dependency>


		<!-- Xtend -->
		<dependency>
			<groupId>org.eclipse.xtend</groupId>
			<artifactId>org.eclipse.xtend.lib</artifactId>
			<version>${xtend.version}</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.eclipse.xtend/org.eclipse.xtend.lib.macro -->
		<dependency>
    		<groupId>org.eclipse.xtend</groupId>
    		<artifactId>org.eclipse.xtend.lib.macro</artifactId>
    		<version>${xtend.version}</version>
		</dependency>


		 

		<!-- https://mvnrepository.com/artifact/com.google.inject/guice -->
		<dependency>
			<groupId>com.google.inject</groupId>
			<artifactId>guice</artifactId>
			<version>4.0</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/aopalliance/aopalliance -->
		<dependency>
			<groupId>aopalliance</groupId>
			<artifactId>aopalliance</artifactId>
			<version>1.0</version>
		</dependency>
		
		
		<!-- https://mvnrepository.com/artifact/javax.inject/javax.inject -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/log4j/log4j -->
		<dependency>
    		<groupId>log4j</groupId>
    		<artifactId>log4j</artifactId>
    		<version>1.2.17</version>
		</dependency>

	</dependencies>


</project>
